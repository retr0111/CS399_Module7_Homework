from wv import Model
from scipy.stats import zscore

def eliminateword_outliers(model: Model, words: list) -> list:
    """
    words: list of str words
    model_path: path to the word vector model file

    :returns: list of str words without outliers
    """
    # Initialize the model
    
    
    
    
    word_models = [model.find_word(x) for x in words]  # Stores the model vectors of the words in the input list

    for str_word in word_models:
        # fetch vector form of word from model

        # End program if a vector representation of a word could not be found in the model.
        if str_word in word_models is None:
            print(f'Vector representation could not be found in model for word: {str_word}')
            return None
        str_word.normalize()
    

    # get similarity to all other words from their models
    similarity_values = []
    for word in word_models:
        sim = sum([word.similarity(w) for w in word_models]) 
        similarity_values.append(sim)

    # Calculate Z scores to determine true similarity
    sim_zscores = zscore(similarity_values)

    # Return words with Z-score less than or equal to 1
    return [words[x] for x in range(len(words)) if sim_zscores[x] <= 1]

# Example usage
result = eliminateword_outliers("model/glove_short.txt", ["dog", "cat", "turtle", "blueberry"])
print(result)